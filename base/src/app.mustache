require('express-yields');
const cors = require('cors');
const app = require('express')();
const bodyParser = require('body-parser');
const HttpError = require('standard-http-error');
const server = require('http').createServer(app);
const io = require('socket.io')(server);
const { thinky: { Errors: { DocumentNotFound, ValidationError } } } = require('../config');

const log = require('../lib/logger');
const routes = require('./routes');
const middleware = require('./middleware');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(cors());

middleware.forEach(item => {
  if (item.http) app.use(item.http);
  if (item.socket) io.use(item.socket);
});

routes.forEach(route => {
  app.use(route.http);
  route.socket(io);
});

app.use((err, req, res, next) => {
  if (err.name === 'UnauthorizedError') {
    res.status(401).send('Invalid token');
  } else if (err instanceof DocumentNotFound) {
    res.status(404).send({ error: 'not found' });
  } else if (err instanceof ValidationError) {
    res.status(422).send({ error: err.message });
  } else if (err instanceof HttpError) {
    res.status(err.code).json({ error: err.message });
  }

  next(err);
});

process.on('unhandledRejection', (reason, p) => {
  log.error('Unhandled Rejection at: Promise ', p, ' reason: ', reason);
});

module.exports = {
  server,
  app
};
