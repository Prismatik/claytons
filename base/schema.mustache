const _ = require('lodash');
const deref = require('json-schema-deref-sync');

let schemaIndexes = {};

const appSchema = require('./schemas');

const getIndexes = snakeCasePlural => {
  return r.table(snakeCasePlural).indexList().run()
    .then(indexes => [snakeCasePlural, indexes.concat('id')]);
};

// Note: This only adds the .indexed property to the schema's top level
// properties and not any nested properties that it might have
const indexModel = (indexes, properties) => {
  return _.mapValues(properties, (prop, name) => {
    if (_.includes(indexes, name)) prop.indexed = true;
    else prop.indexed = false;
    return prop;
  });
};

const transformSchema = (indexes, schema) => {
  return deref(_.mapValues(schema, (model) => {
    const modelIndexes = indexes[model.camelCasePlural];
    model.properties = indexModel(modelIndexes, model.properties);
    return model;
  }));
};

exports.getSchema = () => transformSchema(schemaIndexes, appSchema);
