const path = require('path');
require('app-module-path').addPath(path.join(__dirname, '../..'));
require('dotenv-safe').load({ sample: './example.env' });

const _ = require('lodash');
const os = require('os');
const log = require('src/utils/logger');
const thinky = require('config/thinky');
const { r } = thinky;
require('src/models/_migration'); // setup the _migrations table

const table = r.table('_migrations');

const migrationFiles = require('migrations').filenames;

const applyMigration = (migrations, then) => {
  if (migrations.length === 0) return Promise.resolve();
  const m = migrations.shift();
  return m.func()
  .then(() => {
    return then(m.name);
  })
  .then(() => {
    return applyMigration(migrations, then);
  });
};

const acquireMutex = () => {
  return r.branch(
    table.filter({ name: 'migrations_running_mutex' }).coerceTo('array').ne([]),
    r.error('mutex locked'),
    table.insert({
      hostname: os.hostname(),
      name: 'migrations_running_mutex',
      d: new Date().toISOString()
    })
  ).run();
};

const getMigrationRecords = () => {
  return table.run()
  .then(records => records.map(_.property('name')));
};

exports.releaseMutex = () => {
  return thinky.dbReady()
  .then(() => table.filter({ name: 'migrations_running_mutex' }).delete().run());
};

exports.queryMutex = () => {
  return thinky.dbReady()
  .then(() => table.filter({ name: 'migrations_running_mutex' }).run());
};

exports.up = () => {
  if (migrationFiles.length < 1) return Promise.resolve();

  return thinky.dbReady()
  .then(acquireMutex)
  .then(getMigrationRecords)
  .then(migrationsApplied => _.difference(migrationFiles, migrationsApplied))
  .then(migrationsToApply => {
    const toBeApplied = migrationsToApply.map(file => ({
      func: require(`migrations/${file}`).up,
      name: file
    }));

    return applyMigration(toBeApplied, (name) => {
      log.info('migrated up', name);
      return table.insert({ name }).run();
    });
  })
  .then(exports.releaseMutex);
};

exports.down = (backstopName) => {
  if (migrationFiles.length < 1) return Promise.resolve();

  return thinky.dbReady()
  .then(getMigrationRecords)
  .then(migrationsApplied => {
    const backstop = (backstopName === 'ALL') ? 0 : migrationsApplied.indexOf(backstopName);
    if (backstop === -1) throw new Error("Migration could not be found");

    const migrationsToRollback = migrationFiles.splice(backstop, migrationFiles.length);
    if (migrationsToRollback.length === 0) throw new Error("No migrations to be downed");

    return migrationsToRollback;
  })
  .then(migrationsToRollback => {
    const toRollback = migrationsToRollback.reverse()
    .map(file => ({
      func: require(`migrations/${file}`).down,
      name: file
    }));

    return applyMigration(toRollback, (name) => {
      log.info('migrated down', name);
      return table.filter({ name }).delete().run();
    });
  })
  .then(exports.releaseMutex);
};
