const _ = require('lodash');

exports.normaliseParams = params => {
  return Object.keys(params).reduce((p, k) => {
    const param = params[k];

    p[k] = param;
    if (!isNaN(Number(param))) p[k] = Number(param);
    if (param === 'true') p[k] = true;
    if (param === 'false') p[k] = false;

    return p;
  }, {});
}

// return the first query param found that is indexed (id takes precedence)
exports.getIndex = (schema, params) => {
  const fields = Object.keys(params);
  if (params.id && fields['id'] && fields['id'].indexed) return 'id';

  const properties = schema.properties;
  return _.findKey(params, (val, key) => properties[key] && properties[key].indexed)
}
