const _ = require('lodash');
const r = require('../lib/db');
const controller = require('../lib/controller');
const rethinkdb = require('../lib/rethinkdb');
const schema = require('../lib/schema');

const appSchema = require('../schema').getSchema();
const modelSchema = appSchema['{{name}}'];

var NOT_OPTIMISED = "WARNING: query is optimised, changed feed will not";
NOT_OPTIMISED += " include any newly created documents.";

module.exports = {
  get: (params) => {
    params = _.assign({result: true}, controller.normaliseParams(params));
    const queryParams = schema.filter('{{name}}', params);

    const table = r.table('{{pluralName}}');
    const indexes = controller.getIndexes(modelSchema, queryParams);
    const indexBy = _.contains(indexes, "id") ? "id" : indexes[0];

    const query = rethinkdb.buildQuery(table, indexBy, queryParams);
    const tranformedQuery = rethinkdb.addTransformations(query, indexes, params);

    const taggedQueries = [
      {tag: 'result', q: tranformedQuery},
      {tag: 'count', q: query.count()}
    ].filter(x => params[x.tag]);

    return Promise.all(taggedQueries.map(x => x.q.run()))
    .then(results => {
      return results.reduce((response, result, i) => {
        const tag = taggedQueries[i].tag;
        response[tag] = result;
        if (tag === 'count' && result > 0) response.found = true;
        if (tag === 'response' && result.length > 0) response.found = true;
        return response;
      }, {found: false});
    });
  },
  watch: (params) => {
    params = controller.normaliseParams(params);
    const queryParams = schema.filter('{{name}}', params);

    const changes = {includeInitial: true, includeStates: true};
    const table = r.table('{{pluralName}}');
    const indexes = controller.getIndexes(modelSchema, queryParams);
    const indexBy = _.contains(indexes, "id") ? "id" : indexes[0];

    var query = rethinkdb.buildQuery(table, indexBy, queryParams);
    query = rethinkdb.addTransformations(query, indexes, params);
 
    //if query params were passed but none were on an index field
    if (!controller.isQueryOptimised(indexes, params)) {
      console.log(NOT_OPTIMISED);
      query = table.getAll(r.args(query.getField('id').coerceTo('array')));
    }

    return query.changes(changes).run();
  },
  create: ({{name}}) => {
    const valid = schema.validate({{name}});
    if (!valid) return Promise.reject(valid);
    return r.table('{{pluralName}}').insert({{name}}, {returnChanges: true}).run()
    .then(rethinkdb.firstChange);
  },
  update: ({{name}}) => {
    const valid = schema.validate({{name}});
    if (!valid) return Promise.reject(valid);
    return r.table('{{pluralName}}').update({{name}}, {returnChanges: true}).run()
    .then(rethinkdb.firstChange);
  },
  delete: (id) => {
    return r.table('{{pluralName}}').get(id).delete({returnChanges: true}).run()
    .then(res => {
      return res;
    })
    .then(rethinkdb.firstChange);
  }
};
