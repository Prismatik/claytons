const jsen = require('jsen');
const _ = require('lodash');

const db = require('../lib/db.js');
const schema = require('../schemas/{{name}}.json');
const validate = jsen(schema);

const firstChange = res => {
  return {
    result: res.changes[0].new_val || res.changes[0],
    old_val: res.changes[0].old_val
  }
}

const properties = Object.keys(schema.properties);

const onlyProps = params => (p, prop) => {
  p[prop] = params[prop];
  return p
}

const stringToBool = params => {
  return Object.keys(params).reduce((p, k) => {
    const param = params[k];
    switch (param) {
      case 'true':
        p[k] = true;
        break;
      case 'false':
        p[k] = false;
        break;
      default:
        p[k] = param;
    }
    return p;
  }, {});
}

module.exports = {
  get: (params) => {
    params = _.assign({result: true}, stringToBool(params));
    const table = db.table('{{pluralName}}');

    if (params.id) {
      return table.get(params.id).run()
      .then(res => { return {result: res} });
    }

    const filterParams = properties.reduce(onlyProps(params), {});
    const filteredTable = table.filter(filterParams);

    const query = ['skip', 'limit'].reduce((q, item) => {
      if (params[item]) q = q[item](parseInt(params[item]));
      return q;
    }, filteredTable);

    const taggedQueries = [
      {tag: 'result', q: query},
      {tag: 'count', q: filteredTable.count()}
    ].filter(x => params[x.tag]);

    return Promise.all(taggedQueries.map(x => x.q.run()))
    .then(results => {
      return results.reduce((response, result, i) => {
        const tag = taggedQueries[i].tag;
        response[tag] = result;
        if (tag === 'count' && result > 0) response.found = true;
        if (tag === 'response' && result.length > 0) response.found = true;
        return response;
      }, {found: false});
    });
  },
  watch: (params) => {
    const table = db.table('{{pluralName}}');
    if (params && params.id) {
      return table.get(params.id).changes({includeInitial: true, includeStates: true}).run();
    }

    const filterParams = properties.reduce(onlyProps(params), {});

    return table.filter(filterParams).changes({includeInitial: true, includeStates: true}).run();
  },
  create: ({{name}}) => {
    const valid = validate({{name}});
    if (!valid) return Promise.reject(valid);
    return db.table('{{pluralName}}').insert({{name}}, {returnChanges: true}).run()
    .then(firstChange);
  },
  update: ({{name}}) => {
    const valid = validate({{name}});
    if (!valid) return Promise.reject(valid);
    return db.table('{{pluralName}}').update({{name}}, {returnChanges: true}).run()
    .then(firstChange);
  },
  delete: (id) => {
    return db.table('{{pluralName}}').get(id).delete({returnChanges: true}).run()
    .then(res => {
      return res;
    })
    .then(firstChange);
  }
};
