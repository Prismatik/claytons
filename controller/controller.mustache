const _ = require('lodash');
const r = require('../lib/db');
const controller = require('../lib/controller');
const rethinkdb = require('../lib/rethinkdb');
const schema = require('../lib/schema');

module.exports = {
  get: (params) => {
    const table = r.table('{{pluralName}}');

    if (params.id) {
      return table.get(params.id).run()
      .then(res => { return {result: res} });
    }

    params = _.assign({result: true, order: 'asc'}, controller.normaliseParams(params));

    const filteredTable = table.filter(schema.filter('{{name}}', params));
    const query = rethinkdb.buildQuery(filteredTable, params);

    const taggedQueries = [
      {tag: 'result', q: query},
      {tag: 'count', q: filteredTable.count()}
    ].filter(x => params[x.tag]);

    return Promise.all(taggedQueries.map(x => x.q.run()))
    .then(results => {
      return results.reduce((response, result, i) => {
        const tag = taggedQueries[i].tag;
        response[tag] = result;
        if (tag === 'count' && result > 0) response.found = true;
        if (tag === 'response' && result.length > 0) response.found = true;
        return response;
      }, {found: false});
    });
  },
  watch: (params) => {
    const table = r.table('{{pluralName}}');

    var query;
    if (_.isEmpty(params)) query = table;
    else if (params.id) query = table.get(params.id);
    else {
      params = _.assign({order: 'asc'}, controller.normaliseParams(params));
      const filteredTable = table.filter(schema.filter('{{name}}', params));
      const subQuery = rethinkdb.buildQuery(filteredTable, params);
      query = table.getAll(r.args(subQuery.getField('id').coerceTo('array')));
    }
    return query.changes({includeInitial: true, includeStates: true}).run();
  },
  create: ({{name}}) => {
    const valid = schema.validate({{name}});
    if (!valid) return Promise.reject(valid);
    return r.table('{{pluralName}}').insert({{name}}, {returnChanges: true}).run()
    .then(rethinkdb.firstChange);
  },
  update: ({{name}}) => {
    const valid = schema.validate({{name}});
    if (!valid) return Promise.reject(valid);
    return r.table('{{pluralName}}').update({{name}}, {returnChanges: true}).run()
    .then(rethinkdb.firstChange);
  },
  delete: (id) => {
    return r.table('{{pluralName}}').get(id).delete({returnChanges: true}).run()
    .then(res => {
      return res;
    })
    .then(rethinkdb.firstChange);
  }
};
