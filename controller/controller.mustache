const jsen = require('jsen');
const _ = require('lodash');

const db = require('../lib/db.js');
const schema = require('../schemas/{{name}}.json');
const validate = jsen(schema);

const firstChange = res => {
  return {
    result: res.changes[0].new_val || res.changes[0],
    old_val: res.changes[0].old_val
  }
}

const wrapResult = res => {
  return {result: res}
}

const mergeCount = results => {
  return {
    result: results[0],
    count: results[1]
  };
}

const properties = Object.keys(schema.properties);

const onlyProps = params => (p, prop) => {
  p[prop] = params[prop];
  return p
}

module.exports = {
  get: (params) => {
    const table = db.table('{{pluralName}}');
    if (params && params.id) {
      return table.get(params.id).run()
      .then(wrapResult);
    }

    const filterParams = properties.reduce(onlyProps(params), {});

    const query = ['skip', 'limit'].reduce((q, item) => {
      if (params[item]) q = q[item](parseInt(params[item]));
      return q;
    }, table.filter(filterParams)).run();

    if (params.count) {
      return Promise.all([
        query,
        table.filter(filterParams).count().run()
      ])
      .then(mergeCount)
    } else {
      return query
      .then(wrapResult);
    }
  },
  watch: (params) => {
    const table = db.table('{{pluralName}}');
    if (params && params.id) {
      return table.get(params.id).changes({includeInitial: true, includeStates: true}).run();
    }

    const filterParams = properties.reduce(onlyProps(params), {});

    return table.filter(filterParams).changes({includeInitial: true, includeStates: true}).run();
  },
  create: ({{name}}) => {
    const valid = validate({{name}});
    if (!valid) return Promise.reject(valid);
    return db.table('{{pluralName}}').insert({{name}}, {returnChanges: true}).run()
    .then(firstChange);
  },
  update: ({{name}}) => {
    const valid = validate({{name}});
    if (!valid) return Promise.reject(valid);
    return db.table('{{pluralName}}').update({{name}}, {returnChanges: true}).run()
    .then(firstChange);
  },
  delete: (id) => {
    return db.table('{{pluralName}}').get(id).delete({returnChanges: true}).run()
    .then(firstChange);
  }
};
