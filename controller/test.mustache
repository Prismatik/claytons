const test = require('./tape');
const fetch = require('node-fetch');

const assertOk = (t) => {
  return (res) => {
    return t.ok(res.ok, 'statusCode is 2xx');
  }
};

const unwrapJSON = (res) => {
  return res.json()
  .then(json => json.new_val);
}

const unwrapOldVal = (res) => {
  return res.json()
  .then(json => json.old_val);
}

const getJSON = (suffix) => {
  return fetch(url+suffix)
  .then(unwrapJSON);
}

const url = 'http://localhost:'+process.env.PORT;

const poster = suffix => data => {
  return fetch(url+suffix, {
    method: 'post',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify( data )
  });
};

const deleter = suffix => data => {
  return fetch(url+suffix, {
    method: 'delete',
    headers: {
      'Accept': 'application/json',
    }
  });
};

const {{name}}Poster = poster('/{{pluralName}}')

test('GET /{{pluralName}} should return 200', (t) => {
  return fetch(url+'/{{pluralName}}')
  .then(assertOk(t));
});

test('POSTing a valid sprint should return 200', (t) => {
  const {{name}} = fixture.valid();
  return {{name}}Poster({{name}})
  .then(assertOk(t));
});

test('GET /{{pluralName}}/:id should return 200', (t) => {
  const {{name}} = fixture.valid();
  return {{name}}Poster({{name}})
  .then(unwrapJSON)
  .then(body => getJSON('/{{pluralName}}/'+body.id)
  .then(assertOk(t));
});

test('POSTing a valid {{name}} should actually persist it', (t) => {
  const {{name}} = fixture.valid();
  return {{name}}Poster({{name}})
  .then(unwrapJSON)
  .then(body => getJSON('/{{pluralName}}/'+body.id)
  .then((json) => {
    t.equal(json.name, {{name}}.name);
  });
});

test('POSTing an updated {{name}} should actually persist it', (t) => {
  const {{name}} = fixture.valid();
  return {{name}}Poster({{name}})
  .then(unwrapJSON)
  .then(body => {
    body.name = 'Something else';
    return body
  })
  .then(body => poster('{{name}}/'+body.id)(body))
  .then(unwrapJSON)
  .then(body => getJSON('/{{pluralName}}/'+body.id)
  .then((json) => {
    t.equal(json.name, 'Something else');
  });
});

test('DELETEing a {{name}} should return 200', (t) => {
  const {{name}} = fixture.valid();
  return {{name}}Poster({{name}})
  .then(unwrapJSON)
  .then(body => deleter('{{name}}/'+body.id)(body))
  .then(assertOk(t));
});

test('DELETEing a {{name}} should actually delete it', (t) => {
  const {{name}} = fixture.valid();

  return {{name}}Poster({{name}})
  .then(unwrapJSON)
  .then(body => deleter('{{name}}/'+body.id)(body))
  .then(unwrapOldVal)
  .then(body => getJSON('/{{pluralName}}/'+body.id)
  .then(res => {
    t.equal(res.statusCode, 404);
  });
});
