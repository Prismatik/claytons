exports.normaliseParams = params => {
  return Object.keys(params).reduce((p, k) => {
    const param = params[k];

    p[k] = param;
    if (!isNaN(Number(param))) p[k] = Number(param);
    if (param === 'true') p[k] = true;
    if (param === 'false') p[k] = false;

    return p;
  }, {});
};

exports.getIndexes = (schema, params) => {
  const props = schema.properties;
  const fields = Object.keys(params);

  return fields.filter(f => props[f] && props[f].indexed).sort();
};

const Ajv = require('ajv');
const { thinky, schemas } = require('../config');

exports.create = (modelName) => {
  const schema = schemas[modelName];
  const validator = exports.thinkyValidatorFor(schema);
  const model = thinky.createModel(
    schema.camelCasePlural,
    exports.toThinkySchema(schema.properties),
    { validator, enforce_extra: 'strict' }
  );

  exports.findIndexes(schema).forEach(name => {
    model.ensureIndex(name);
  });

  return model;
};

exports.findIndexes = (schema) => {
  return Object.keys(schema.properties)
    .filter(p => schema.properties[p].indexed);
};

exports.thinkyValidatorFor = (schema) => {
  const ajv = new Ajv({ allErrors: true });
  const validate = ajv.compile(schema);
  return document => {
    if (!validate(document)) {
      throw new thinky.Errors.ValidationError(
        validate.errors.map(e => e.message).join(', ')
      );
    }
  };
};

exports.toThinkySchema = (properties) => {
  const schema = {};

  Object.keys(properties).forEach(name => {
    schema[name] = exports.toThinkyType(properties[name]);
  });

  return schema;
};

const typesToTypes = {
  string: String,
  number: Number,
  integer: thinky.type.number().integer(),
  date: Date,
  boolean: Boolean,
  array: [],
  object: {}
};

exports.toThinkyType = (property) => {
  const type = property.type;
  const Type = typesToTypes[type];

  if (!Type) throw new Error(`can't compute property type: ${type} for property: ${name}`);

  switch (type) {
    case 'array': return [typesToTypes[property.items.type]];
    case 'object': return exports.toThinkySchema(property.properties);
    case 'string': return property.enum ? thinky.type.string().enum(property.enum) : Type;
    default:
      return Type;
  }
};
