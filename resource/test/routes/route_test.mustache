const uuid = require('uuid');
const { app } = require('../helper');
const {{camelCasePlural}} = require('../../src/controllers/{{snakeCasePlural}}');
const {{camelCase}}Fixture = require('../../fixtures/{{snakeCase}}');

describe{{#isUser}}.only{{/isUser}}('/{{kebabCasePlural}} route', () => {
  let {{camelCase}};
  let {{camelCase}}1;
  let {{camelCase}}2;

  beforeEach(function * () {
    const oldRecords = yield {{camelCasePlural}}.all();
    yield oldRecords.map(r => r.delete());

    [{{camelCase}}1, {{camelCase}}2] = yield [
      {{camelCasePlural}}.create({{camelCase}}Fixture.valid()),
      {{camelCasePlural}}.create({{camelCase}}Fixture.valid())
    ];

    {{camelCase}} = {{camelCase}}1;
  });

  describe('GET /', () => {
    const sorted = (records, param = 'id') => records
      .sort((a, b) => (a[param] > b[param] ? 1 : -1))
      .map(i => Object.assign({}, i)){{#isUser}}
      .map(i => { delete(i.password); return i; })
      {{/isUser}};

    it('returns all records by default', function * () {
      const response = yield app.get('/{{kebabCasePlural}}');
      response.status.must.eql(200);
      response.body.must.be.an(Array);
      sorted(response.body).must.eql(sorted([{{camelCase}}1, {{camelCase}}2]));
    });

    it('allows to specify property filters', function * () {
      const response = yield app.get('/{{kebabCasePlural}}', { id: {{camelCase}}1.id });
      response.status.must.eql(200);
      sorted(response.body).must.eql(sorted([{{camelCase}}1]));
    });

    it('allows to sort data by fields', function * () {
      const response = yield app.get('/{{kebabCasePlural}}', { orderBy: 'rev' });
      response.status.must.eql(200);
      sorted(response.body, 'rev').must.eql(sorted([{{camelCase}}1, {{camelCase}}2], 'rev'));
    });

    it('allows `limit` data', function * () {
      const response = yield app.get('/{{kebabCasePlural}}', { limit: 1, orderBy: 'rev' });
      response.status.must.eql(200);
      response.body.must.eql(sorted([{{camelCase}}1, {{camelCase}}2], 'rev').slice(0, 1));
    });
  });

  describe('GET /:id', () => {
    it('returns the record if exists', function * () {
      const response = yield app.get('/{{kebabCasePlural}}/' + {{camelCase}}.id);
      response.status.must.eql(200);
      response.body.must.be.object();
      {{#isUser}}
      delete({{camelCase}}.password);
      {{/isUser}}
      response.body.must.eql(Object.assign({}, {{camelCase}}));
    });

    it('throws 404 when the record does not exist', function * () {
      const response = yield app.get(`/{{kebabCasePlural}}/hack`);
      response.status.must.eql(404);
      response.body.must.eql({ error: 'not found' });
    });
  });

  describe('POST /', () => {
    it('creates new record when data is good', function * () {
      const data = {{camelCase}}Fixture.valid(); delete(data.id);
      const response = yield app.post('/{{kebabCasePlural}}', data);
      response.status.must.eql(201);
      response.body.must.be.object();
      {{#isUser}}
      response.body.must.not.have.property('password');
      {{/isUser}}
      const {{camelCase}} = response.body;

      delete({{camelCase}}.id); delete({{camelCase}}.rev);
      delete(data.rev); delete(data.password);

      {{camelCase}}.must.eql(data);
    });

    it('throws 422 if the data is bad', function * () {
      const response = yield app.post('/{{kebabCasePlural}}', {});
      response.status.must.eql(422);
      response.body.must.be.object();
      response.body.must.have.property('error');
      response.body.error.must.contain('should have required property');
    });
    {{#isUser}}
    it('throws 422 if a password is mising', function * () {
      const data = {{camelCase}}Fixture.valid(); delete(data.password);
      const response = yield app.post('/{{kebabCasePlural}}', data);
      response.status.must.eql(422);
      response.body.must.eql({
        error: "should have required property 'password'"
      });
    });
    {{/isUser}}
  });

  describe('PUT /:id', () => {
    it('updates the data and returns the updated record back', function * () {
      const data = { rev: uuid.v4() };
      const response = yield app.put('/{{kebabCasePlural}}/' + {{camelCase}}.id, data);
      response.status.must.eql(200);

      const expected = Object.assign({}, {{camelCase}}, data);
      delete(expected.password);

      response.body.must.eql(expected);
    });

    it('throws 404 if the record does not exist', function * () {
      const response = yield app.put('/{{kebabCasePlural}}/hack', {});
      response.status.must.eql(404);
      response.body.must.eql({ error: 'not found' });
    });

    it('throws 422 if the data is malformed', function * () {
      const data = { rev: 'hack hack hack' };
      const response = yield app.put('/{{kebabCasePlural}}/' + {{camelCase}}.id, data);
      response.status.must.eql(422);
      response.body.must.eql({
        error: 'should match pattern "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"'
      });
    });
  });

  describe('DELETE /:id', () => {
    it('deletes a record if it exists', function * () {
      const response = yield app.delete('/{{kebabCasePlural}}/' + {{camelCase}}.id);
      response.status.must.eql(200);
      response.body.must.eql({ ok: true });
    });

    it('throws 404 if the record does not exist', function * () {
      const response = yield app.delete('/{{kebabCasePlural}}/hack', {});
      response.status.must.eql(404);
      response.body.must.eql({ error: 'not found' });
    });
  });
});

/********************************************************************************

  {{#isUser}}
  describe('POST /{{kebabCasePlural}}/signin', () => {
    it('returns 401 response with invalid email', () => {
      const signin = poster('/{{kebabCasePlural}}/signin');
      return signin({ email: 'notexist@example.com', password: 'ABCD1234' })
        .then(statusEquals(401))
        .then(({ body }) => {
          body.must.have.property('error', 'Unauthorized');
        });
    });

    it('returns 401 response with incorrect password', () => {
      const data = fixture.valid();
      return {{camelCase}}Poster(data)
      .then(unwrapJSON)
      .then(() => {
        const signin = poster('/{{kebabCasePlural}}/signin');
        return signin({ email: data.email, password: 'ABCD1234' })
          .then(statusEquals(401))
          .then(({ body }) => {
            body.must.have.property('error', 'Unauthorized');
          });
      });
    });

    it('POST /{{kebabCasePlural}}/signin with correct credentials should return a valid jwt',
    () => {
      const data = fixture.valid();
      return {{camelCase}}Poster(data)
      .then(unwrapJSON)
      .then((user) => {
        const signin = poster('/{{kebabCasePlural}}/signin');
        return signin({ email: data.email, password: data.password })
          .then(statusEquals(200))
          .then(({ body }) => {
            body.found.must.be.true();
            body.token.must.not.be.null();
            body.user.must.eql(_.omit(user, 'password'));
          });
      });
    });
  });
  {{/isUser}}

  describe('Socket connection', () => {
    it('opens a web-socket connection and returns a single record', () => {
      return single{{pascalCase}}Creator()
        .then(body => {
          return new Promise(resolve => {
            const opts = { query: `id=${body.id}`, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            io.on('record', data => {
              resolve(data.new_val);
              io.disconnect();
            });
          })
          .must.resolve.to.eql(body);
        });
    });

    it('opens a websocket connection to {{camelCasePlural}} should return all of them', () => {
      return {{camelCase}}Creator(2)
        .then(() => {
          return new Promise(resolve => {
            const opts = { forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            let count = 0;
            io.on('record', () => {
              count++;
              if (count > 1) {
                resolve(count);
                io.disconnect();
              }
            });
          })
          .must.resolve.to.eql(2);
        });
    });

    it('opens a websocket connection to {{camelCasePlural}} and returns changed documents',
    () => {
      return single{{pascalCase}}Creator()
        .then(data => {
          {{^isUser}}
          const update = Object.assign({}, data, { name: 'ohai' });
          {{/isUser}}
          {{#isUser}}
          const update = Object.assign({}, _.omit(data, 'password'), { name: 'ohai' });
          {{/isUser}}
          return new Promise(resolve => {
            const opts = { forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            io.on('state', state => {
              if (state.state === 'ready') {
                io.on('record', record => {
                  {{^isUser}}
                  const result = record.new_val;
                  {{/isUser}}
                  {{#isUser}}
                  const result = _.omit(record.new_val, 'password');
                  {{/isUser}}
                  result.must.eql(update);
                  io.disconnect();
                  resolve();
                });
                putter(`/{{kebabCasePlural}}/${data.id}`)(update);
              }
            });
          });
        });
    });

    it('accepts the same filter params as GET requests', () => {
      return {{camelCase}}Creator(2)
        .then({{camelCasePlural}} => {
          const target = {{camelCasePlural}}[0];
          const targetKey = Object.keys(target).filter(k => k !== 'id')[0];
          return new Promise(resolve => {
            const query = [targetKey].reduce((r, k) => {
              r[k] = target[k];
              return r;
            }, {});
            const opts = { query, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            io.on('record', data => {
              data.new_val.must.eql(target);
            });
            io.on('state', data => {
              if (data.state !== 'ready') return;
              io.disconnect();
              resolve();
            });
          });
        });
    });

    it('accepts the same limit param as GET requests', () => {
      return {{camelCase}}Creator(2)
        .then(() => {
          return new Promise(resolve => {
            const opts = { query: { limit: 1 }, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            let count = 0;
            io.on('record', () => count++);
            io.on('state', data => {
              if (data.state !== 'ready') return;
              count.must.eql(1);
              io.disconnect();
              resolve();
            });
          });
        });
    });

    it('accepts the same count param as GET requests', () => {
      return {{camelCase}}Creator(2)
        .then(() => {
          return new Promise(resolve => {
            const opts = { query: { count: true, limit: 1 }, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            io.on('metadata', data => {
              data.count.must.be.a.number();
              data.count.must.be.gt(1);
              io.disconnect();
              resolve();
            });
          });
        });
    });

    it('emits a warning on an unchangefeedable query', () => {
      return {{camelCase}}Creator(2)
        .then(() => {
          return new Promise(resolve => {
            const opts = { query: { limit: 1 }, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            let warned = false;
            io.on('warning', (warn) => {
              if (warn === warnings.RESTRICTED_FEED) warned = true;
            });
            io.on('state', data => {
              if (data.state !== 'ready') return;
              io.disconnect();
              warned.must.be.true();
              resolve();
            });
          });
        });
    });

    it('skips records if asked', () => {
      return {{camelCase}}Creator(5)
        .then(() => {
          return new Promise(resolve => {
            const opts = { query: { limit: 1 }, forceNew: true };
            const io = IO(`${url}/{{kebabCasePlural}}`, opts);
            let first;
            io.on('record', record => {
              first = record;
              io.disconnect();
              const opts2 = { query: { skip: 1 }, forceNew: true };
              const io2 = IO(`${url}/{{kebabCasePlural}}`, opts2);
              io2.on('record', record2 => {
                record2.must.not.eql(first);
                io2.disconnect();
                return resolve();
              });
            });
          });
        });
    });
  });
});
****************************************************************/
