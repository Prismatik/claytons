{{#isUser}}
const HttpError = require('standard-http-error');
{{/isUser}}
const {{pascalCase}} = require('../../src/models/{{snakeCase}}');
const {{camelCasePlural}} = require('../../src/controllers/{{snakeCasePlural}}');
const { thinky: { Errors: { DocumentNotFound, ValidationError } } } = require('../../config');
const {{camelCase}}Fixture = require('../../fixtures/{{snakeCase}}');
const UUID_RE = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;

describe('{{snakeCasePlural}} controller', () => {
  let validData;
  let record;

  beforeEach(function * () {
    validData = {{camelCase}}Fixture.valid();
    record = yield {{camelCasePlural}}.create(validData);
  });

  const pureData = data => Object.assign({}, data, { id: null, rev: null{{#isUser}}, password: null{{/isUser}} });

  describe{{#isUser}}.only{{/isUser}}('.all(query)', () => {
    let record1;
    let record2;
    let record3;

    const sorted = records => (
      records
        .sort((a, b) => a.id > b.id ? -1 : 1)
        .map(i => Object.assign({}, i))
    );

    beforeEach(function * () {
      const oldRecords = yield {{pascalCase}}.run();
      yield oldRecords.map(r => r.delete());

      [record1, record2, record3] = yield [
        {{camelCasePlural}}.create({{camelCase}}Fixture.valid()),
        {{camelCasePlural}}.create({{camelCase}}Fixture.valid()),
        {{camelCasePlural}}.create({{camelCase}}Fixture.valid())
      ];
    });

    it('returns all the records by default', function * () {
      const result = yield {{camelCasePlural}}.all();
      result.must.be.an(Array);
      sorted(result).must.eql(sorted([record1, record2, record3]));
    });

    it('allows to filter the list by a specific field', function * () {
      const filter = { id: record1.id };
      const result = yield {{camelCasePlural}}.all(filter);
      sorted(result).must.eql(sorted([record1]));
    });
  });

  describe('.find(id)', () => {
    it('returns the record when it exists', function * () {
      const result = yield {{camelCasePlural}}.find(record.id);

      Object.assign({}, result).must.eql(Object.assign({}, record));
    });

    it('throws DocumentNotFound if the record does not exist', function * () {
      try {
        yield {{camelCasePlural}}.find('hack!');
        throw new Error('must fail here!');
      } catch (e) {
        e.must.be.instanceOf(DocumentNotFound);
      }
    });
  });

  describe('.create(data)', () => {
    beforeEach(function * () {
      // refreshing the validData to avoid conflicts
      validData = {{camelCase}}Fixture.valid();
    });

    it('saves valid data and returns a model instance', function * () {
      const record = yield {{camelCasePlural}}.create(validData);
      record.constructor.must.equal({{pascalCase}});

      record.id.must.match(UUID_RE);

      pureData(record).must.eql(pureData(validData));
    });

    it('automatically adds a `rev` property onto new records', function * () {
      delete(validData.rev);
      const record = yield {{camelCasePlural}}.create(validData);
      record.rev.must.match(UUID_RE);
    });

    it('throws validation errors when data is missing', function * () {
      try {
        yield {{camelCasePlural}}.create({});
        throw new Error('should fail');
      } catch (e) {
        e.must.be.instanceOf(ValidationError);
        e.message.must.contain('should have required property');
      }
    });
    {{#isUser}}
    it('must require `email` and `password`', function * () {
      try {
        yield {{camelCasePlural}}.create(Object.assign(validData, { email: undefined, password: undefined }));
        throw new Error('must fail here');
      } catch (e) {
        e.must.be.instanceOf(ValidationError);
        e.message.must.contain("should have required property 'email'");
        e.message.must.contain("should have required property 'password'");
      }
    });

    it('must validate `email` format', function * () {
      try {
        yield {{camelCasePlural}}.create(Object.assign(validData, { email: 'hack!' }));
        throw new Error('should fail');
      } catch (e) {
        e.must.be.instanceOf(ValidationError);
        e.message.must.contain('should match format "email"');
      }
    });

    it('must encrypt passwords', function * () {
      const data = Object.assign(validData, { password: '84(0/\\/' });
      const record = yield {{camelCasePlural}}.create(data);
      record.password.must.not.eql(data.password);
    });
    {{/isUser}}
  });

  describe('.update(params)', () => {
    it('updates params when things are good', function * () {
      const oldId = record.id;
      const validData = {{camelCase}}Fixture.valid(); delete(validData.id);
      const result = yield {{camelCasePlural}}.update(record.id, validData);
      result.constructor.must.equal({{pascalCase}});
      result.id.must.eql(oldId);

      pureData(result).must.eql(pureData(validData));
    });

    it('explodes when data is wrong', function * () {
      try {
        yield {{camelCasePlural}}.update(record.id, { rev: 'hack!' });
        throw new Error('should fail');
      } catch (e) {
        e.must.be.instanceOf(ValidationError);
        e.message.must.contain('should match pattern');
      }
    });

    it('throws DocumentNotFound when the document does not exist', function * () {
      try {
        yield {{camelCasePlural}}.update('hack!', validData);
      } catch (e) {
        e.must.be.instanceOf(DocumentNotFound);
      }
    });
    {{#isUser}}
    it('does not allow update to borked emails', function * () {
      try {
        yield {{camelCasePlural}}.update(record.id, { email: 'hack!' });
        throw new Error('should fail');
      } catch (e) {
        e.must.be.instanceOf(ValidationError);
        e.message.must.contain('should match format "email"');
      }
    });

    it('re-encrypts new passwords', function * () {
      const oldPassword = record.password;
      const data = { password: '84(0/\\/' };
      const result = yield {{camelCasePlural}}.update(record.id, data);
      result.password.must.not.eql(data.password);
      result.password.must.not.eql(oldPassword);
    });
    {{/isUser}}
  });

  describe('.delete(id)', () => {
    it('deletes a record for sure when it exists', function * () {
      yield {{camelCasePlural}}.delete(record.id);

      const result = yield {{pascalCase}}.getAll(record.id);
      result.must.eql([]);
    });

    it('throws DocumentNotFound when the document does not exist', function * () {
      try {
        yield {{camelCasePlural}}.delete('hack!');
        throw new Error('must fail here');
      } catch (e) {
        e.must.be.instanceOf(DocumentNotFound);
      }
    });
  });
  {{#isUser}}
  describe('.signin(email, password)', () => {
    it('returns a user and token if everything is correct', function * () {
      const result = yield {{camelCasePlural}}.signin(validData.email, validData.password);
      result.token.must.be.string();

      delete(record.password);
      Object.assign({}, result.user).must.eql(Object.assign({}, record));
    });

    it('throws UNAUTHORIZED if the email is wrong', function * () {
      try {
        yield {{camelCasePlural}}.signin('h4ckr@h4ck.com', validData.password);
      } catch (e) {
        e.must.be.instanceOf(HttpError);
        e.code.must.eql(401);
      }
    });

    it('throws UNAUTHORIZED if the password is wrong', function * () {
      try {
        yield {{camelCasePlural}}.signin(validData.email, 'hack hack hack');
      } catch (e) {
        e.must.be.instanceOf(HttpError);
        e.code.must.eql(401);
      }
    });
  });
  {{/isUser}}
});
