const model = require('../../lib/model');
const { thinky, schemas } = require('../../config');

describe('lib/model', () => {
  describe('.create(modelName)', () => {
    const TEST_JSON_SCHEMA = {
      type: 'object',
      name: 'thing',
      camelCasePlural: 'things',
      properties: {
        id: {
          type: 'string',
          pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
        },
        email: {
          type: 'string',
          format: 'email',
          indexed: true
        },
        password: {
          type: 'string'
        }
      },
      required: [
        'email',
        'password'
      ]
    };
    let Model;

    before(() => {
      schemas.thing = TEST_JSON_SCHEMA;
      Model = model.create('thing');
    });

    it('should build a thinky class', () => {
      Model.must.equal(thinky.models.things);
    });

    it('should pick up validations correctly', () => {
      return new Model({}).save().must.reject.with.error(
        thinky.Errors.ValidationError,
        "should have required property 'email', should have required property 'password'"
      );
    });

    it('should handle malformed data as well', () => {
      const params = { email: 'blah!', password: 'blah!' };
      return new Model(params).save().must.reject.with.error(
        thinky.Errors.ValidationError,
        'should match format "email"'
      );
    });

    it('ensures indexes on indexed fields', () => {
      return Model._promisesReadyPromise.then(() => {
        Model._getModel()._indexes.must.eql({ email: true });
      });
    });
  });
});
