const model = require('../../src/utils/model');
const { thinky, schema } = require('../../config');

describe('utils/model', () => {
  describe('.create(modelName)', () => {
    const TEST_JSON_SCHEMA = {
      type: 'object',
      name: 'thing',
      pluralName: 'things',
      properties: {
        id: {
          type: 'string',
          pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
        },
        email: {
          type: 'string',
          format: 'email'
        },
        password: {
          type: 'string'
        }
      },
      required: [
        'email',
        'password'
      ]
    };
    let Model;

    before(() => {
      schema.thing = TEST_JSON_SCHEMA;
      Model = model.create('thing');
    });

    it('should build a thinky class', () => {
      Model.must.equal(thinky.models.things);
    });

    it('should pick up validations correctly', () => {
      return new Model({}).save().must.reject.with.error(
        thinky.Errors.ValidationError,
        "should have required property 'email', should have required property 'password'"
      );
    });

    it('should handle malformed data as well', () => {
      const params = { email: 'blah!', password: 'blah!' };
      return new Model(params).save().must.reject.with.error(
        thinky.Errors.ValidationError,
        'should match format "email"'
      );
    });
  });

  describe('.create(modelName, {audit: true})', () => {
    const TEST_JSON_SCHEMA = {
      type: 'object',
      name: 'auditableThing',
      pluralName: 'auditableThings',
      properties: {
        id: {
          type: 'string',
          pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
        },
        email: {
          type: 'string',
          format: 'email'
        },
        password: {
          type: 'string'
        }
      },
      required: [
        'email',
        'password'
      ]
    };
    let Model;
    const params = { email: 'blah@example.com', password: 'blah!' };

    before(() => {
      schema.auditableThing = TEST_JSON_SCHEMA;
      Model = model.create('auditableThing', { audit: true });
    });

    it('should populate the audit log', function*() {
      const thing = yield new Model(params).save();

      const audit = yield Model.auditModel.filter({ doc: { id: thing.id } }).run();

      audit[0].created_at.must.exist();
      audit[0].doc.email.must.eql(params.email);
      audit[0].doc.password.must.eql(params.password);
    });
  });
});
