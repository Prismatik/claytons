{{#isUser}}
const HttpError = require('standard-http-error');
const password = require('simple-password');
const _ = require('lodash');
const jwt = require('../../lib/jwt');
const HASH_ROUNDS = parseInt(process.env.HASH_ROUNDS, 10);
const errors = require('../../config/errors');
{{/isUser}}
const model = require('../models/{{snakeCase}}.js');

module.exports = {
  get: query => {
    return model.get(query);
  },
  {{^isUser}}
  create: body => {
    return model.create(body);
  },
  update: body => {
    return model.update(body);
  },
  {{/isUser}}
  {{#isUser}}
  *create(body) {
    if (!body.password) throw new HttpError(422, errors.NO_PASSWORD);

    const hash = yield password.create(body.password, HASH_ROUNDS);
    const data = _.merge(body, { password: hash });
    return yield model.create(data);
  },
  *update(body) {
    if (body.password) {
      body.password = yield password.create(body.password, HASH_ROUNDS);
    }

    return model.update(body);
  },
  *signin(email, pass) {
    const { result: [user] } = yield model.get({ email });

    if (!user) throw new HttpError('UNAUTHORIZED');

    const verified = yield password.verify(pass, user.password);
    if (!verified) throw new HttpError('UNAUTHORIZED');

    const token = yield jwt.sign({ id: user.id, role: user.role });

    return { token, user: _.omit(user, 'password') };
  },
  signout: body => {
    return model.signout(body);
  },
  {{/isUser}}
  delete: id => {
    return model.delete(id);
  },
  watch: query => {
    return model.get(query, true);
  }
};
