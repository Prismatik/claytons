const uuid = require('uuid');
const { {{pascalCase}} } = require('../models');
{{#isUser}}
const HttpError = require('standard-http-error');
const password = require('simple-password');
const jwt = require('../../lib/jwt');
const HASH_ROUNDS = parseInt(process.env.HASH_ROUNDS, 10);
function * hashPassword(params) {
  return Object.assign({}, params, params.password ? {
    password: yield password.create(params.password, HASH_ROUNDS)
  } : {});
}
{{/isUser}}

module.exports = {
  *all() {
    // TODO query converter
    return yield {{pascalCase}}.run();
  },
  *find(id) {
    return yield {{pascalCase}}.get(id);
  },
  {{^isUser}}
  *create(params) {
    return yield new {{pascalCase}}(
      Object.assign({ rev: uuid.v4() }, params)
    ).save();
  },
  *update(id, params) {
    const {{camelCase}} = yield this.find(id);
    return yield {{camelCase}}.merge(params).save();
  },
  {{/isUser}}
  {{#isUser}}
  *create(params) {
    const data = Object.assign({ rev: uuid.v4() }, yield hashPassword(params));
    return yield new {{pascalCase}}(data).save();
  },
  *update(id, params) {
    const {{camelCase}} = yield this.find(id);
    return yield {{camelCase}}.merge(yield hashPassword(params)).save();
  },
  *signin(email, pass) {
    const [user] = yield {{pascalCase}}.filter({ email }).run();

    if (!user) throw new HttpError('UNAUTHORIZED');

    const verified = yield password.verify(pass, user.password);
    if (!verified) throw new HttpError('UNAUTHORIZED');

    const token = jwt.sign({ id: user.id, role: user.role });
    delete(user.password);

    return { token, user };
  },
  {{/isUser}}
  *delete(id) {
    const {{camelCase}} = yield this.find(id);
    return yield {{camelCase}}.delete();
  },
  watch: query => {
    // TODO figure this
    return query;
  }
};
