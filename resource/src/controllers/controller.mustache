const { {{pascalCase}} } = require('../models');
const { createController } = require('../utils/controller');
{{#isUser}}
const uuid = require('uuid');
const HttpError = require('standard-http-error');
const { createToken, hashPassword, verifyPassword } = require('../utils/auth');
{{/isUser}}

module.exports = createController({{pascalCase}}, {
  {{^isUser}}// TODO business logic{{/isUser}}
  {{#isUser}}
  *create(params) {
    const data = Object.assign({ rev: uuid.v4() }, yield hashPassword(params));
    return yield new {{pascalCase}}(data).save();
  },

  *update(id, params) {
    const {{camelCase}} = yield this.find(id);
    return yield {{camelCase}}.merge(yield hashPassword(params)).save();
  },

  *signin(email, pass) {
    const [user] = yield {{pascalCase}}.filter({ email }).run();
    if (!user) throw new HttpError('UNAUTHORIZED');

    const verified = yield verifyPassword(pass, user.password);
    if (!verified) throw new HttpError('UNAUTHORIZED');

    const token = createToken({ id: user.id, role: user.role });

    return { token, user };
  },

  *signout() {
    return { ok: true };
  }
  {{/isUser}}
});
